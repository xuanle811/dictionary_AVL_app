// frontend/src/App.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import "bootstrap/dist/css/bootstrap.min.css";

function App() {
  const [words, setWords] = useState([]);
  const [word, setWord] = useState('');
  const [definition, setDefinition] = useState('');
  const [message, setMessage] = useState('');

  const API_BASE = "http://127.0.0.1:5000"; // Flask backend

    // ==== H√†m t·∫£i danh s√°ch t·ª´
  const loadWords = async () => {
    try {
      const res = await axios.get(`${API_BASE}/api/words`);
      setWords(res.data);
    } catch (err) {
      console.error("L·ªói t·∫£i d·ªØ li·ªáu:", err);
    }
  };

  useEffect(() => {
    loadWords();
  }, []);

  const searchWord = async () => {
    try {
      const response = await axios.get(`${API_BASE}/search_word?word=${word}`);
      setDefinition(response.data.definition);
      setMessage('');
    } catch (error) {
      setMessage('Word not found');
    }
  };

  const addWord = async () => {
    try {
      await axios.post(`${API_BASE}/add_word`, {
        word,
        definition
      });
      setMessage('Word added successfully');
      setWord('');
      setDefinition('');
      loadWords(); // c·∫≠p nh·∫≠t danh s√°ch
    } catch (error) {
      setMessage('Error adding word');
    }
  };

  // ===== X√≥a t·ª´ =====
  const deleteWord = async (wordToDelete) => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·ª´ "${wordToDelete}" kh√¥ng?`)) return;
    try {
      await axios.delete(`${API_BASE}/delete_word`, {
        params: { word: wordToDelete },
      });
      setMessage(`ƒê√£ x√≥a t·ª´ "${wordToDelete}"`);
      loadWords(); // t·∫£i l·∫°i danh s√°ch
    } catch (err) {
      console.error("L·ªói khi x√≥a t·ª´:", err);
      alert("Kh√¥ng th·ªÉ x√≥a t·ª´!");
    }
  };


  // s·ª≠a t·ª´
  // Th√™m state t·∫°m ƒë·ªÉ l∆∞u t·ª´ ƒëang s·ª≠a
const [editingWord, setEditingWord] = useState(null);
const [editingDefinition, setEditingDefinition] = useState('');

// H√†m m·ªü modal/form s·ª≠a
const startEdit = (word, definition) => {
  setEditingWord(word);
  setEditingDefinition(definition);
};

// H√†m g·ª≠i s·ª≠a t·ª´ l√™n backend
const saveEdit = async () => {
  try {
    await axios.put(`${API_BASE}/update_word`, {
      old_word: editingWord,
      new_word: editingWord, // gi·ªØ nguy√™n t·ª´, ch·ªâ s·ª≠a nghƒ©a; n·∫øu mu·ªën ƒë·ªïi t·ª´ th√¨ input kh√°c
      definition: editingDefinition
    });
    setEditingWord(null);
    setEditingDefinition('');
    loadWords();
    alert('ƒê√£ c·∫≠p nh·∫≠t t·ª´ th√†nh c√¥ng');
  } catch (err) {
    console.error(err);
    alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t·ª´');
  }
};


  return (
    <div className="container mt-5">
      <h2 className="text-center mb-4">üìò T·ª™ ƒêI·ªÇN AVL TREE</h2>

      {/* Nh·∫≠p t·ª´ m·ªõi */}
      <div className="card p-3 mb-4">
        <div className="row g-2">
          <div className="col-md-4">
            <input
              type="text"
              placeholder="Nh·∫≠p t·ª´..."
              className="form-control"
              value={word}
              onChange={(e) => setWord(e.target.value)}
            />
          </div>
          <div className="col-md-6">
            <input
              type="text"
              placeholder="Nghƒ©a c·ªßa t·ª´..."
              className="form-control"
              value={definition}
              onChange={(e) => setDefinition(e.target.value)}
            />
          </div>
          <div className="col-md-2">
            <button onClick={addWord} className="btn btn-primary px-4">
              Th√™m
            </button>
          </div>
        </div>
      </div>


      <div className="card p-3 mb-4">
      <div className="row g-2 align-items-center">
        <div className="col-md-8">
          <input
            type="text"
            placeholder="Nh·∫≠p t·ª´ c·∫ßn t√¨m..."
            className="form-control"
            value={word}
            onChange={(e) => setWord(e.target.value)}
            onKeyDown={(e) => { if (e.key === 'Enter') searchWord(); }} // Nh·∫•n Enter c≈©ng t√¨m
          />
        </div>
        <div className="col-md-4">
          <button className="btn btn-info px-4" onClick={searchWord}>
            üîç T√¨m
          </button>
        </div>
      </div>

      {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm */}
      {word && (
        <div className="mt-3">
          {message ? (
            <p className="text-danger">{message}</p>
          ) : definition ? (
            <p><strong>{word}:</strong> {definition}</p>
          ) : null}
        </div>
      )}
    </div>

      {/* B·∫£ng hi·ªÉn th·ªã danh s√°ch */}
      <table className="table table-bordered table-hover">
        <thead className="table-dark text-center">
          <tr>
            <th style={{ width: "25%" }}>T·ª´</th>
            <th style={{ width: "60%" }}>Nghƒ©a</th>
            <th style={{ width: "15%" }}>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {words.length > 0 ? (
            words.map((w) => (
              <tr key={w.word}>
                <td>{w.word}</td>
                <td>
                  {editingWord === w.word ? (
                    <input
                      type="text"
                      value={editingDefinition}
                      onChange={(e) => setEditingDefinition(e.target.value)}
                      className="form-control"
                    />
                  ) : (
                    w.definition
                  )}
                </td>
                <td className="text-center">
                  {editingWord === w.word ? (
                    <>
                      <button className="btn btn-success btn-sm me-1" onClick={saveEdit}>L∆∞u</button>
                      <button className="btn btn-secondary btn-sm" onClick={() => setEditingWord(null)}>H·ªßy</button>
                    </>
                  ) : (
                    <>
                      <button className="btn btn-warning btn-sm me-1" onClick={() => startEdit(w.word, w.definition)}>S·ª≠a</button>
                      <button className="btn btn-danger btn-sm" onClick={() => deleteWord(w.word)}>X√≥a</button>
                    </>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="3" className="text-center">Ch∆∞a c√≥ t·ª´ n√†o trong t·ª´ ƒëi·ªÉn.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}

export default App;
